{"ast":null,"code":"var _jsxFileName = \"/Users/skylarsoehl/Documents/NEU/2021 SPRING/HCI/FUBU/src/pages/admin/choose-fridge-name.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ReactComponent as FUBULogoSmall } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/fubu_logo_small.svg\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport theme from \"../../theme\";\nimport { Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\"\n  },\n  logo: {\n    paddingTop: theme.spacing(4),\n    textAlign: \"center\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    display: \"block\"\n  },\n  input: {\n    marginTop: \"50px\",\n    marginBottom: \"40px\",\n    width: \"500px\"\n  },\n  miniButtons: {\n    width: \"143px\",\n    height: \"46px\",\n    marginBottom: \"25px\",\n    marginLeft: \"50px\",\n    marginRight: \"50px\",\n    fontSize: \"24px\",\n    borderRadius: \"8px\"\n  },\n  text: {\n    marginTop: \"50px\",\n    marginBottom: \"25px\",\n    textAlign: \"center\"\n  },\n  buttonText: {\n    marginTop: \"40px\",\n    marginBottom: \"25px\",\n    textAlign: \"center\"\n  }\n}));\n\nfunction ChooseFridgeName() {\n  _s();\n\n  const classes = useStyles();\n  const [completed, setCompleted] = React.useState(false);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(FUBULogoSmall, {\n      className: classes.logo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      className: classes.text,\n      variant: \"h1\",\n      children: [\" \", \"What's the name of your \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }, this), \"community fridge?\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          firstName: \"\",\n          lastName: \"\",\n          email: \"\",\n          password: \"\",\n          passwordConfirm: \"\",\n          pronouns: \"\"\n        },\n        validate: values => {\n          const errors = {};\n\n          if (!values.firstName) {\n            errors.firstName = \"Required\";\n          }\n\n          if (!values.lastName) {\n            errors.lastName = \"Required\";\n          }\n\n          if (!values.email) {\n            errors.email = \"Required\";\n          } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = \"Invalid email address\";\n          }\n\n          if (!values.password) {\n            errors.password = \"Required\";\n          } else if (!/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/i.test(values.password)) {\n            errors.password = \"Password must have a minimum of eight characters, at least one letter, one number and one special character (*, !, &, etc)\";\n          }\n\n          if (!values.passwordConfirm) {\n            errors.passwordConfirm = \"You must confirm your password\";\n          } else if (values.passwordConfirm !== values.password) {\n            errors.passwordConfirm = \"Your passwords do not match\";\n          }\n\n          if (!values.pronouns) {\n            errors.pronouns = \"Required\";\n          }\n\n          return errors;\n        },\n        onSubmit: (values, {\n          setSubmitting\n        }) => {\n          setTimeout(() => {\n            setSubmitting(false);\n            history.push(\"/join-or-create\");\n          }, 500);\n        },\n        children: ({\n          submitForm,\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          className: classes.form,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            margin: 1,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              className: classes.input,\n              component: TextField,\n              name: \"firstName\",\n              type: \"text\",\n              label: \"First name\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            margin: 1,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              className: classes.input,\n              component: TextField,\n              name: \"lastName\",\n              type: \"text\",\n              label: \"Last name\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            margin: 1,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              className: classes.input,\n              component: TextField,\n              name: \"email\",\n              type: \"email\",\n              label: \"Email\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            margin: 1,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              className: classes.input,\n              component: TextField,\n              type: \"password\",\n              label: \"Password\",\n              name: \"password\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            margin: 1,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              className: classes.input,\n              component: TextField,\n              name: \"passwordConfirm\",\n              type: \"password\",\n              label: \"Confirm Password\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            margin: 1,\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              className: classes.input,\n              component: TextField,\n              name: \"pronouns\",\n              type: \"text\",\n              label: \"Pronouns\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            className: classes.text,\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              className: classes.miniButtons,\n              variant: \"contained\",\n              color: \"secondary\",\n              onClick: () => history.goBack(),\n              children: \"Back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: classes.miniButtons,\n              size: \"large\",\n              variant: \"contained\",\n              color: \"primary\",\n              disabled: isSubmitting,\n              onClick: submitForm,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChooseFridgeName, \"1XVb8Rng23UMon85O/vkgr9O9hs=\", false, function () {\n  return [useStyles];\n});\n\n_c = ChooseFridgeName;\nexport default ChooseFridgeName;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChooseFridgeName\");","map":{"version":3,"sources":["/Users/skylarsoehl/Documents/NEU/2021 SPRING/HCI/FUBU/src/pages/admin/choose-fridge-name.js"],"names":["React","makeStyles","ThemeProvider","Grid","theme","Typography","Button","TextField","useStyles","root","display","flexWrap","justifyContent","logo","paddingTop","spacing","textAlign","marginLeft","marginRight","input","marginTop","marginBottom","width","miniButtons","height","fontSize","borderRadius","text","buttonText","ChooseFridgeName","classes","completed","setCompleted","useState","firstName","lastName","email","password","passwordConfirm","pronouns","values","errors","test","setSubmitting","setTimeout","history","push","submitForm","isSubmitting","form","goBack"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ReactComponent as FUBULogoSmall } from \"../../assets/fubu_logo_small.svg\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport theme from \"../../theme\";\nimport { Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n  },\n  logo: {\n    paddingTop: theme.spacing(4),\n    textAlign: \"center\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    display: \"block\",\n  },\n  input: {\n    marginTop: \"50px\",\n    marginBottom: \"40px\",\n    width: \"500px\",\n  },\n  miniButtons: {\n    width: \"143px\",\n    height: \"46px\",\n    marginBottom: \"25px\",\n    marginLeft: \"50px\",\n    marginRight: \"50px\",\n    fontSize: \"24px\",\n    borderRadius: \"8px\",\n  },\n  text: {\n    marginTop: \"50px\",\n    marginBottom: \"25px\",\n    textAlign: \"center\",\n  },\n  buttonText: {\n    marginTop: \"40px\",\n    marginBottom: \"25px\",\n    textAlign: \"center\",\n  },\n}));\n\nfunction ChooseFridgeName() {\n  const classes = useStyles();\n\n  const[completed, setCompleted] = React.useState(false)\n\n  return (\n    <ThemeProvider theme={theme}>\n      <FUBULogoSmall className={classes.logo}></FUBULogoSmall>\n      <Typography className={classes.text} variant=\"h1\">\n        {\" \"}\n        What's the name of your <br></br>community fridge?\n      </Typography>\n      <Grid container className={classes.root}>\n      <Formik\n            initialValues={{\n              firstName: \"\",\n              lastName: \"\",\n              email: \"\",\n              password: \"\",\n              passwordConfirm: \"\",\n              pronouns: \"\",\n            }}\n            validate={(values) => {\n              const errors = {};\n\n              if (!values.firstName) {\n                errors.firstName = \"Required\";\n              }\n\n              if (!values.lastName) {\n                errors.lastName = \"Required\";\n              }\n\n              if (!values.email) {\n                errors.email = \"Required\";\n              } else if (\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n              ) {\n                errors.email = \"Invalid email address\";\n              }\n\n              if (!values.password) {\n                errors.password = \"Required\";\n              } else if (\n                !/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/i.test(\n                  values.password\n                )\n              ) {\n                errors.password =\n                  \"Password must have a minimum of eight characters, at least one letter, one number and one special character (*, !, &, etc)\";\n              }\n\n              if (!values.passwordConfirm) {\n                errors.passwordConfirm = \"You must confirm your password\";\n              } else if (values.passwordConfirm !== values.password) {\n                errors.passwordConfirm = \"Your passwords do not match\";\n              }\n\n              if (!values.pronouns) {\n                errors.pronouns = \"Required\";\n              }\n\n              return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n              setTimeout(() => {\n                setSubmitting(false);\n                history.push(\"/join-or-create\");\n              }, 500);\n            }}\n          >\n            {({ submitForm, isSubmitting }) => (\n              <Form className={classes.form}>\n                <Box margin={1}>\n                  <Field\n                    className={classes.input}\n                    component={TextField}\n                    name=\"firstName\"\n                    type=\"text\"\n                    label=\"First name\"\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Box margin={1}>\n                  <Field\n                    className={classes.input}\n                    component={TextField}\n                    name=\"lastName\"\n                    type=\"text\"\n                    label=\"Last name\"\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Box margin={1}>\n                  <Field\n                    className={classes.input}\n                    component={TextField}\n                    name=\"email\"\n                    type=\"email\"\n                    label=\"Email\"\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Box margin={1}>\n                  <Field\n                    className={classes.input}\n                    component={TextField}\n                    type=\"password\"\n                    label=\"Password\"\n                    name=\"password\"\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Box margin={1}>\n                  <Field\n                    className={classes.input}\n                    component={TextField}\n                    name=\"passwordConfirm\"\n                    type=\"password\"\n                    label=\"Confirm Password\"\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Box margin={1}>\n                  <Field\n                    className={classes.input}\n                    component={TextField}\n                    name=\"pronouns\"\n                    type=\"text\"\n                    label=\"Pronouns\"\n                    variant=\"outlined\"\n                  />\n                </Box>\n                <Grid className={classes.text} item xs={12}>\n                  <Button\n                    className={classes.miniButtons}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => history.goBack()}\n                  >\n                    Back\n                  </Button>\n                  <Button\n                    className={classes.miniButtons}\n                    size=\"large\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={isSubmitting}\n                    onClick={submitForm}\n                  >\n                    Next\n                  </Button>\n                </Grid>\n              </Form>\n            )}\n          </Formik>\n      </Grid>\n    </ThemeProvider>\n  );\n}\n\nexport default ChooseFridgeName;\n"]},"metadata":{},"sourceType":"module"}