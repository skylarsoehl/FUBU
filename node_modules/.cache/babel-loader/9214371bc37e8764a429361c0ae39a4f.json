{"ast":null,"code":"import MuiAutocomplete from '@material-ui/lab/Autocomplete';\nimport { createElement } from 'react';\nimport MuiToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport invariant from 'tiny-warning';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n}\n\nfunction fieldToAutocomplete(_a) {\n  var disabled = _a.disabled,\n      field = _a.field,\n      _b = _a.form,\n      isSubmitting = _b.isSubmitting,\n      setFieldValue = _b.setFieldValue,\n      type = _a.type,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      freeSolo = _a.freeSolo,\n      props = __rest(_a, [\"disabled\", \"field\", \"form\", \"type\", \"onChange\", \"onBlur\", \"freeSolo\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.multiple) {\n      invariant(Array.isArray(field.value), \"value for \" + field.name + \" is not an array, this can caused unexpected behaviour\");\n    }\n  }\n\n  var _onChange = field.onChange,\n      _onBlur = field.onBlur,\n      _multiple = field.multiple,\n      fieldSubselection = __rest(field, [\"onChange\", \"onBlur\", \"multiple\"]);\n\n  return __assign(__assign({\n    freeSolo: freeSolo,\n    onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (event) {\n      field.onBlur(event !== null && event !== void 0 ? event : field.name);\n    },\n    onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, value) {\n      setFieldValue(field.name, value);\n    },\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting,\n    loading: isSubmitting\n  }, fieldSubselection), props);\n}\n\nfunction Autocomplete(props) {\n  return createElement(MuiAutocomplete, __assign({}, fieldToAutocomplete(props)));\n}\n\nAutocomplete.displayName = 'FormikMaterialUIAutocomplete';\n\nfunction fieldToToggleButtonGroup(_a) {\n  var _b = _a.field,\n      _onChange = _b.onChange,\n      fieldOnBlur = _b.onBlur,\n      field = __rest(_b, [\"onChange\", \"onBlur\"]),\n      type = _a.type,\n      onChange = _a.onChange,\n      onBlur = _a.onBlur,\n      form = _a.form,\n      props = __rest(_a, [\"field\", \"type\", \"onChange\", \"onBlur\", \"form\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(type === 'checkbox', \"property type=checkbox is missing from field \" + field.name + \", this can caused unexpected behaviour\");\n\n    if (!props.exclusive) {\n      invariant(Array.isArray(field.value), \"value for \" + field.name + \" is not an array, this can caused unexpected behaviour\");\n    }\n  }\n\n  return __assign(__assign({\n    onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {\n      fieldOnBlur(field.name);\n    },\n    onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, newValue) {\n      form.setFieldValue(field.name, newValue);\n    }\n  }, field), props);\n}\n\nfunction ToggleButtonGroup(props) {\n  return createElement(MuiToggleButtonGroup, __assign({}, fieldToToggleButtonGroup(props)));\n}\n\nToggleButtonGroup.displayName = 'FormikMaterialUIToggleButtonGroup';\nexport { fieldToAutocomplete, Autocomplete, fieldToToggleButtonGroup, ToggleButtonGroup };","map":{"version":3,"sources":["../src/Autocomplete.tsx","../src/ToggleButtonGroup.tsx"],"names":["React.createElement"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport MuiAutocomplete, {\n  AutocompleteProps as MuiAutocompleteProps,\n} from '@material-ui/lab/Autocomplete';\nimport { FieldProps } from 'formik';\nimport invariant from 'tiny-warning';\n\nexport { AutocompleteRenderInputParams } from '@material-ui/lab/Autocomplete';\n\nexport interface AutocompleteProps<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n>\n  extends FieldProps,\n    Omit<\n      MuiAutocompleteProps<T, Multiple, DisableClearable, FreeSolo>,\n      'name' | 'value' | 'defaultValue'\n    > {\n  type?: string;\n}\n\nexport function fieldToAutocomplete<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n>({\n  disabled,\n  field,\n  form: { isSubmitting, setFieldValue },\n  type,\n  onChange,\n  onBlur,\n  freeSolo,\n  ...props\n}: AutocompleteProps<\n  T,\n  Multiple,\n  DisableClearable,\n  FreeSolo\n>): MuiAutocompleteProps<T, Multiple, DisableClearable, FreeSolo> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.multiple) {\n      invariant(\n        Array.isArray(field.value),\n        `value for ${field.name} is not an array, this can caused unexpected behaviour`\n      );\n    }\n  }\n\n  const {\n    onChange: _onChange,\n    onBlur: _onBlur,\n    multiple: _multiple,\n    ...fieldSubselection\n  } = field;\n\n  return {\n    freeSolo,\n    onBlur:\n      onBlur ??\n      function (event) {\n        field.onBlur(event ?? field.name);\n      },\n    onChange:\n      onChange ??\n      function (_event, value) {\n        setFieldValue(field.name, value);\n      },\n    disabled: disabled ?? isSubmitting,\n    loading: isSubmitting,\n    ...fieldSubselection,\n    ...props,\n  };\n}\n\nexport function Autocomplete<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n>(props: AutocompleteProps<T, Multiple, DisableClearable, FreeSolo>) {\n  return <MuiAutocomplete {...fieldToAutocomplete(props)} />;\n}\n\nAutocomplete.displayName = 'FormikMaterialUIAutocomplete';\n","import * as React from 'react';\nimport MuiToggleButtonGroup, {\n  ToggleButtonGroupProps as MuiToggleButtonGroupProps,\n} from '@material-ui/lab/ToggleButtonGroup';\n// import ToggleButton from '@material-ui/lab/ToggleButton';\nimport { FieldProps } from 'formik';\nimport invariant from 'tiny-warning';\n\nexport interface ToggleButtonGroupProps\n  extends FieldProps,\n    Omit<MuiToggleButtonGroupProps, 'name' | 'value' | 'error'> {\n  type?: string;\n}\n\nexport function fieldToToggleButtonGroup({\n  field: { onChange: _onChange, onBlur: fieldOnBlur, ...field },\n  type,\n  onChange,\n  onBlur,\n  form,\n  ...props\n}: ToggleButtonGroupProps): MuiToggleButtonGroupProps {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      type === 'checkbox',\n      `property type=checkbox is missing from field ${field.name}, this can caused unexpected behaviour`\n    );\n\n    if (!props.exclusive) {\n      invariant(\n        Array.isArray(field.value),\n        `value for ${field.name} is not an array, this can caused unexpected behaviour`\n      );\n    }\n  }\n\n  return {\n    onBlur:\n      onBlur ??\n      function () {\n        fieldOnBlur(field.name);\n      },\n    onChange:\n      onChange ??\n      function (_event, newValue) {\n        form.setFieldValue(field.name, newValue);\n      },\n    ...field,\n    ...props,\n  };\n}\n\nexport function ToggleButtonGroup(props: ToggleButtonGroupProps) {\n  return <MuiToggleButtonGroup {...fieldToToggleButtonGroup(props)} />;\n}\n\nToggleButtonGroup.displayName = 'FormikMaterialUIToggleButtonGroup';\n"]},"metadata":{},"sourceType":"module"}