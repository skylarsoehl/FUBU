{"ast":null,"code":"var _jsxFileName = \"/Users/rjohnson/dev/github.com/FUBU/src/pages/dashboard/dashboard-organizer.js\",\n    _s = $RefreshSig$();\n\nimport Sidebar from \"../../core/components/core-sidebar\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Grid from '@material-ui/core/Grid';\nimport theme from '../../theme';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction createData(task, status, assignee, expert, priority) {\n  return {\n    task,\n    status,\n    assignee,\n    expert,\n    priority\n  };\n}\n\nconst rows = [createData('Task A', 'In Progress', '@Me', '@Me', '! Low'), createData('Task B', 'Not Started', '@Me', '@Me', '!! Medium'), createData('Task C', 'Complete', '@Me', '@Me', '!!! High')];\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n  table: {\n    minWidth: 650,\n    padding: '20px'\n  },\n  paper: {\n    marginTop: '30px',\n    marginBottom: '40px',\n    padding: '10px'\n  },\n  logout: {\n    backgroundColor: theme.palette.error.main,\n    width: '148px',\n    height: '46px',\n    color: \"#fff\",\n    fontSize: '24px',\n    boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.25)',\n    '&:hover': {\n      backgroundColor: theme.palette.error.dark\n    }\n  },\n  logoutRow: {\n    marginTop: '32px',\n    marginRight: '50px',\n    display: 'flex',\n    justifyContent: 'flex-end',\n    height: '%50'\n  },\n  text: {\n    display: 'flex',\n    textAlign: 'center',\n    justifyContent: 'center',\n    fontSize: '50px',\n    fontWeight: 700\n  },\n  checkins: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    width: '350px',\n    backgroundColor: \"#8D919C\",\n    color: \"#fff\",\n    borderRadius: '6px',\n    marginLeft: '36px',\n    padding: '20px',\n    marginBottom: '150px'\n  },\n  taskBoard: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n    width: '760px',\n    height: '520px',\n    backgroundColor: \"#8D919C\",\n    color: \"#fff\",\n    borderRadius: '6px',\n    marginLeft: '110px',\n    padding: '20px',\n    marginBottom: '50px'\n  },\n  card: {\n    width: '256px',\n    height: '160px',\n    marginBottom: '20px',\n    marginTop: '40px',\n    border: '1px solid #F2F2F2',\n    borderRadius: 6,\n    boxShadow: '0 8px 16px 0 rgba(0, 0, 0, 0.25)',\n    overflow: 'hidden'\n  },\n  cardHeader: {\n    fontSize: '18px',\n    textAlign: 'left'\n  },\n  cardBody: {\n    fontSize: '16px',\n    textAlign: 'left',\n    marginTop: '15px'\n  },\n  miniButtons: {\n    width: '101px',\n    height: '31px',\n    marginBottom: '10px',\n    fontSize: '18px',\n    borderRadius: '8px',\n    marginLeft: '5px'\n  },\n  taskButton: {\n    width: '200px',\n    height: '50px',\n    marginTop: '30px',\n    fontSize: '18px',\n    borderRadius: '8px',\n    marginLeft: '5px'\n  },\n  errorTxt: {\n    color: 'red'\n  },\n  nothingText: {\n    color: '#D7D7D7',\n    marginBottom: '100px'\n  }\n}));\n\nfunction DashOrg() {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      xs: 12,\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        xs: 2,\n        children: /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        xs: 10,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          className: classes.logoutRow,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.logout,\n            variant: \"contained\",\n            size: \"large\",\n            color: \"error\",\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.text,\n            children: \" Good afternoon, Jo!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          className: classes.text,\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: classes.checkins,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h1\",\n                children: \"Today's Check-ins:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 9,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: classes.taskBoard,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h1\",\n                  children: \"Today's Tasks:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.nothingText,\n                variant: \"h2\",\n                children: \"Nothing here yet!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DashOrg, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = DashOrg;\nexport default DashOrg;\n{\n  /* \n     CODE FOR WHEN A TASK LIST HAS ITEMS IN IT (instead of the current empty state, which we would expect when an organizer first joins)\n     \n     <TableContainer className={classes.paper} component={Paper}>\n  <Table className={classes.table} aria-label=\"simple table\">\n     <TableHead>\n         <TableRow>\n             <TableCell><b>Task Name</b></TableCell>\n             <TableCell align=\"left\"><b>Status</b></TableCell>\n             <TableCell align=\"left\"><b>Assignee</b></TableCell>\n             <TableCell align=\"left\"><b>Expert on this topic</b></TableCell>\n             <TableCell align=\"left\"><b>Priority</b></TableCell>\n         </TableRow>\n     </TableHead>\n     <TableBody>\n         {rows.map((row) => (\n             <TableRow key={row.task}>\n                 <TableCell component=\"th\" scope=\"row\">\n                     {row.task}\n                 </TableCell>\n                 <TableCell align=\"left\">{row.status}</TableCell>\n                 <TableCell align=\"left\">{row.assignee}</TableCell>\n                 <TableCell align=\"left\">{row.expert}</TableCell>\n                 <TableCell align=\"left\">{row.priority}</TableCell>\n             </TableRow>\n         ))}\n     </TableBody>\n  </Table>\n  </TableContainer>\n  <Button className={classes.taskButton} variant=\"contained\" color=\"primary\" size=\"large\">Manage Tasks</Button> */\n}\n{\n  /* \n     CODE FOR\n     <Card className={classes.card}>\n  <CardContent>\n     <Typography className={classes.cardHeader}>\n         <b>Last Check-in: 11:00 am</b>\n     </Typography>\n     <Typography className={classes.cardBody}>\n         Completed by: Becca Johnson\n     </Typography>\n  </CardContent>\n  <CardActions className={classes.action}>\n     <Button className={classes.miniButtons} variant=\"contained\" color=\"primary\" size=\"large\">View</Button>\n  </CardActions>\n  </Card>\n  <Card className={classes.card}>\n  <CardContent>\n     <Typography className={classes.cardHeader}>\n         <b>Next Check-in: 1:00 pm</b>\n     </Typography>\n     <Typography className={classes.cardBody}>\n         Assigned to: Skylar Soehl\n     </Typography>\n     <Typography className={classes.cardBody}>\n         Status: <span className={classes.errorTxt}>Not completed</span>\n     </Typography>\n  </CardContent>\n  </Card> */\n}\n{\n  /* <Grid item xs={12}>\n  <Typography variant=\"h1\">Today's Tasks:</Typography>\n  </Grid>\n  <Typography variant=\"h4\" color=\"secondary\">\n  Nothing here yet!</Typography> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DashOrg\");","map":{"version":3,"sources":["/Users/rjohnson/dev/github.com/FUBU/src/pages/dashboard/dashboard-organizer.js"],"names":["Sidebar","React","makeStyles","ThemeProvider","Grid","theme","Typography","Card","CardActions","CardContent","Button","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","createData","task","status","assignee","expert","priority","rows","useStyles","root","display","table","minWidth","padding","paper","marginTop","marginBottom","logout","backgroundColor","palette","error","main","width","height","color","fontSize","boxShadow","dark","logoutRow","marginRight","justifyContent","text","textAlign","fontWeight","checkins","flexWrap","borderRadius","marginLeft","taskBoard","card","border","overflow","cardHeader","cardBody","miniButtons","taskButton","errorTxt","nothingText","DashOrg","classes"],"mappings":"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","sourcesContent":["import Sidebar from \"../../core/components/core-sidebar\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Grid from '@material-ui/core/Grid';\nimport theme from '../../theme';\nimport { Typography } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nfunction createData(task, status, assignee, expert, priority) {\n    return { task, status, assignee, expert, priority };\n}\n\nconst rows = [\n    createData('Task A', 'In Progress', '@Me', '@Me', '! Low'),\n    createData('Task B', 'Not Started', '@Me', '@Me', '!! Medium'),\n    createData('Task C', 'Complete', '@Me', '@Me', '!!! High'),\n];\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n\n    },\n    table: {\n        minWidth: 650,\n        padding: '20px',\n    },\n    paper: {\n        marginTop: '30px',\n        marginBottom: '40px',\n        padding: '10px',\n    },\n    logout: {\n        backgroundColor: theme.palette.error.main,\n        width: '148px',\n        height: '46px',\n        color: \"#fff\",\n        fontSize: '24px',\n        boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.25)',\n        '&:hover': {\n            backgroundColor: theme.palette.error.dark,\n        },\n    },\n    logoutRow: {\n        marginTop: '32px',\n        marginRight: '50px',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        height: '%50',\n\n    },\n    text: {\n        display: 'flex',\n        textAlign: 'center',\n        justifyContent: 'center',\n        fontSize: '50px',\n        fontWeight: 700,\n    },\n    checkins: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        width: '350px',\n        backgroundColor: \"#8D919C\",\n        color: \"#fff\",\n        borderRadius: '6px',\n        marginLeft: '36px',\n        padding: '20px',\n        marginBottom: '150px',\n    },\n    taskBoard: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n        width: '760px',\n        height: '520px',\n        backgroundColor: \"#8D919C\",\n        color: \"#fff\",\n        borderRadius: '6px',\n        marginLeft: '110px',\n        padding: '20px',\n        marginBottom: '50px',\n    },\n    card: {\n        width: '256px',\n        height: '160px',\n        marginBottom: '20px',\n        marginTop: '40px',\n        border: '1px solid #F2F2F2',\n        borderRadius: 6,\n        boxShadow: '0 8px 16px 0 rgba(0, 0, 0, 0.25)',\n        overflow: 'hidden',\n\n    },\n    cardHeader: {\n        fontSize: '18px',\n        textAlign: 'left',\n    },\n    cardBody: {\n        fontSize: '16px',\n        textAlign: 'left',\n        marginTop: '15px',\n    },\n    miniButtons: {\n        width: '101px',\n        height: '31px',\n        marginBottom: '10px',\n        fontSize: '18px',\n        borderRadius: '8px',\n        marginLeft: '5px',\n    },\n    taskButton: {\n        width: '200px',\n        height: '50px',\n        marginTop: '30px',\n        fontSize: '18px',\n        borderRadius: '8px',\n        marginLeft: '5px',\n    },\n    errorTxt: {\n        color: 'red',\n    },\n    nothingText: {\n        color: '#D7D7D7',\n        marginBottom: '100px',\n    }\n}));\n\n\n\nfunction DashOrg() {\n    const classes = useStyles();\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Grid container xs={12} className={classes.root}>\n                <Grid container xs={2}>\n                    <Sidebar></Sidebar>\n                </Grid>\n                <Grid container xs={10}>\n                    <Grid item xs={12} className={classes.logoutRow}>\n                        <Button className={classes.logout} variant=\"contained\" size=\"large\" color=\"error\">Logout</Button>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography className={classes.text}> Good afternoon, Jo!</Typography>\n                    </Grid>\n                    <Grid className={classes.text} item xs={12}>\n                        <Grid item xs={3}>\n                            <Grid item className={classes.checkins}>\n                                <Typography variant=\"h1\">Today's Check-ins:</Typography>\n                              \n                            </Grid>\n                        </Grid>\n                        <Grid item xs={9}>\n                            <Grid item className={classes.taskBoard}>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h1\">Today's Tasks:</Typography>\n                                </Grid>\n                                <Typography className= {classes.nothingText} variant=\"h2\">\n                                    Nothing here yet!</Typography>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </ThemeProvider >\n\n\n    );\n}\n\nexport default DashOrg;\n\n{/* \n    CODE FOR WHEN A TASK LIST HAS ITEMS IN IT (instead of the current empty state, which we would expect when an organizer first joins)\n    \n    <TableContainer className={classes.paper} component={Paper}>\n<Table className={classes.table} aria-label=\"simple table\">\n    <TableHead>\n        <TableRow>\n            <TableCell><b>Task Name</b></TableCell>\n            <TableCell align=\"left\"><b>Status</b></TableCell>\n            <TableCell align=\"left\"><b>Assignee</b></TableCell>\n            <TableCell align=\"left\"><b>Expert on this topic</b></TableCell>\n            <TableCell align=\"left\"><b>Priority</b></TableCell>\n        </TableRow>\n    </TableHead>\n    <TableBody>\n        {rows.map((row) => (\n            <TableRow key={row.task}>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.task}\n                </TableCell>\n                <TableCell align=\"left\">{row.status}</TableCell>\n                <TableCell align=\"left\">{row.assignee}</TableCell>\n                <TableCell align=\"left\">{row.expert}</TableCell>\n                <TableCell align=\"left\">{row.priority}</TableCell>\n            </TableRow>\n        ))}\n    </TableBody>\n</Table>\n</TableContainer>\n<Button className={classes.taskButton} variant=\"contained\" color=\"primary\" size=\"large\">Manage Tasks</Button> */}\n\n{/* \n    CODE FOR\n    <Card className={classes.card}>\n<CardContent>\n    <Typography className={classes.cardHeader}>\n        <b>Last Check-in: 11:00 am</b>\n    </Typography>\n    <Typography className={classes.cardBody}>\n        Completed by: Becca Johnson\n    </Typography>\n</CardContent>\n<CardActions className={classes.action}>\n    <Button className={classes.miniButtons} variant=\"contained\" color=\"primary\" size=\"large\">View</Button>\n</CardActions>\n</Card>\n<Card className={classes.card}>\n<CardContent>\n    <Typography className={classes.cardHeader}>\n        <b>Next Check-in: 1:00 pm</b>\n    </Typography>\n    <Typography className={classes.cardBody}>\n        Assigned to: Skylar Soehl\n    </Typography>\n    <Typography className={classes.cardBody}>\n        Status: <span className={classes.errorTxt}>Not completed</span>\n    </Typography>\n</CardContent>\n</Card> */}\n\n\n{/* <Grid item xs={12}>\n<Typography variant=\"h1\">Today's Tasks:</Typography>\n</Grid>\n<Typography variant=\"h4\" color=\"secondary\">\nNothing here yet!</Typography> */}"]},"metadata":{},"sourceType":"module"}