import { createElement } from 'react';
import { DatePicker, KeyboardDatePicker, TimePicker, KeyboardTimePicker, DateTimePicker, KeyboardDateTimePicker } from '@material-ui/pickers';
import { getIn } from 'formik';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function createErrorHandler(fieldError, fieldName, setFieldError) {
    return function (error) {
        if (error !== fieldError && error !== '') {
            setFieldError(fieldName, error ? String(error) : undefined);
        }
    };
}

function fieldToDatePicker(_a) {
    var _b = _a.field, _onChange = _b.onChange, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onChange", "onBlur"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, disabled = _a.disabled, onChange = _a.onChange, onBlur = _a.onBlur, onError = _a.onError, props = __rest(_a, ["field", "form", "disabled", "onChange", "onBlur", "onError"]);
    var fieldError = getIn(errors, field.name);
    var showError = getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ error: showError, helperText: showError ? fieldError : props.helperText, disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldValue(field.name, date);
        }, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DatePicker$1(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (createElement(DatePicker, __assign({}, fieldToDatePicker(props)), children));
}
DatePicker$1.displayName = 'FormikMaterialUIDatePicker';

function fieldToKeyboardDatePicker(_a) {
    var disabled = _a.disabled, _b = _a.field, _onChange = _b.onChange, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onChange", "onBlur"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, onChange = _a.onChange, onBlur = _a.onBlur, onError = _a.onError, props = __rest(_a, ["disabled", "field", "form", "onChange", "onBlur", "onError"]);
    var fieldError = getIn(errors, field.name);
    var showError = getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ error: showError, helperText: showError ? fieldError : props.helperText, disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldValue(field.name, date);
        }, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function KeyboardDatePicker$1(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (createElement(KeyboardDatePicker, __assign({}, fieldToKeyboardDatePicker(props)), children));
}
KeyboardDatePicker$1.displayName = 'FormikMaterialUIKeyboardDatePicker';

function fieldToTimePicker(_a) {
    var disabled = _a.disabled, _b = _a.field, _onChange = _b.onChange, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onChange", "onBlur"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, onChange = _a.onChange, onBlur = _a.onBlur, onError = _a.onError, props = __rest(_a, ["disabled", "field", "form", "onChange", "onBlur", "onError"]);
    var fieldError = getIn(errors, field.name);
    var showError = getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ error: showError, helperText: showError ? fieldError : props.helperText, disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldValue(field.name, date);
        }, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function TimePicker$1(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (createElement(TimePicker, __assign({}, fieldToTimePicker(props)), children));
}
TimePicker$1.displayName = 'FormikMaterialUITimePicker';

function fieldToKeyboardTimePicker(_a) {
    var disabled = _a.disabled, _b = _a.field, _onChange = _b.onChange, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onChange", "onBlur"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, onChange = _a.onChange, onBlur = _a.onBlur, onError = _a.onError, props = __rest(_a, ["disabled", "field", "form", "onChange", "onBlur", "onError"]);
    var fieldError = getIn(errors, field.name);
    var showError = getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ error: showError, helperText: showError ? fieldError : props.helperText, disabled: disabled != undefined ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldValue(field.name, date);
        }, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function KeyboardTimePicker$1(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (createElement(KeyboardTimePicker, __assign({}, fieldToKeyboardTimePicker(props)), children));
}
KeyboardTimePicker$1.displayName = 'FormikMaterialUIKeyboardTimePicker';

function fieldToDateTimePicker(_a) {
    var disabled = _a.disabled, _b = _a.field, _onChange = _b.onChange, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onChange", "onBlur"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, onChange = _a.onChange, onBlur = _a.onBlur, onError = _a.onError, props = __rest(_a, ["disabled", "field", "form", "onChange", "onBlur", "onError"]);
    var fieldError = getIn(errors, field.name);
    var showError = getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ error: showError, helperText: showError ? fieldError : props.helperText, disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldValue(field.name, date);
        }, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DateTimePicker$1(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (createElement(DateTimePicker, __assign({}, fieldToDateTimePicker(props)), children));
}
DateTimePicker$1.displayName = 'FormikMaterialUIDateTimePicker';

function fieldToKeyboardDateTimePicker(_a) {
    var disabled = _a.disabled, _b = _a.field, _onChange = _b.onChange, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onChange", "onBlur"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, onChange = _a.onChange, onBlur = _a.onBlur, onError = _a.onError, props = __rest(_a, ["disabled", "field", "form", "onChange", "onBlur", "onError"]);
    var fieldError = getIn(errors, field.name);
    var showError = getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ error: showError, helperText: showError ? fieldError : props.helperText, disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldValue(field.name, date);
        }, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (e) {
            fieldOnBlur(e !== null && e !== void 0 ? e : field.name);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function KeyboardDateTimePicker$1(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (createElement(KeyboardDateTimePicker, __assign({}, fieldToKeyboardDateTimePicker(props)), children));
}
KeyboardDateTimePicker$1.displayName = 'FormikMaterialUIKeyboardDateTimePicker';

export { fieldToDatePicker, DatePicker$1 as DatePicker, fieldToKeyboardDatePicker, KeyboardDatePicker$1 as KeyboardDatePicker, fieldToTimePicker, TimePicker$1 as TimePicker, fieldToKeyboardTimePicker, KeyboardTimePicker$1 as KeyboardTimePicker, fieldToDateTimePicker, DateTimePicker$1 as DateTimePicker, fieldToKeyboardDateTimePicker, KeyboardDateTimePicker$1 as KeyboardDateTimePicker };
//# sourceMappingURL=formik-material-ui-pickers.es6.js.map
