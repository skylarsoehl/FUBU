'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var MuiAutocomplete = _interopDefault(require('@material-ui/lab/Autocomplete'));
var React = require('react');
var MuiToggleButtonGroup = _interopDefault(require('@material-ui/lab/ToggleButtonGroup'));
var invariant = _interopDefault(require('tiny-warning'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function fieldToAutocomplete(_a) {
    var disabled = _a.disabled, field = _a.field, _b = _a.form, isSubmitting = _b.isSubmitting, setFieldValue = _b.setFieldValue, type = _a.type, onChange = _a.onChange, onBlur = _a.onBlur, freeSolo = _a.freeSolo, props = __rest(_a, ["disabled", "field", "form", "type", "onChange", "onBlur", "freeSolo"]);
    if (process.env.NODE_ENV !== 'production') {
        if (props.multiple) {
            invariant(Array.isArray(field.value), "value for " + field.name + " is not an array, this can caused unexpected behaviour");
        }
    }
    var _onChange = field.onChange, _onBlur = field.onBlur, _multiple = field.multiple, fieldSubselection = __rest(field, ["onChange", "onBlur", "multiple"]);
    return __assign(__assign({ freeSolo: freeSolo, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (event) {
            field.onBlur(event !== null && event !== void 0 ? event : field.name);
        }, onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, value) {
            setFieldValue(field.name, value);
        }, disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, loading: isSubmitting }, fieldSubselection), props);
}
function Autocomplete(props) {
    return React.createElement(MuiAutocomplete, __assign({}, fieldToAutocomplete(props)));
}
Autocomplete.displayName = 'FormikMaterialUIAutocomplete';

function fieldToToggleButtonGroup(_a) {
    var _b = _a.field, _onChange = _b.onChange, fieldOnBlur = _b.onBlur, field = __rest(_b, ["onChange", "onBlur"]), type = _a.type, onChange = _a.onChange, onBlur = _a.onBlur, form = _a.form, props = __rest(_a, ["field", "type", "onChange", "onBlur", "form"]);
    if (process.env.NODE_ENV !== 'production') {
        invariant(type === 'checkbox', "property type=checkbox is missing from field " + field.name + ", this can caused unexpected behaviour");
        if (!props.exclusive) {
            invariant(Array.isArray(field.value), "value for " + field.name + " is not an array, this can caused unexpected behaviour");
        }
    }
    return __assign(__assign({ onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
            fieldOnBlur(field.name);
        }, onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, newValue) {
            form.setFieldValue(field.name, newValue);
        } }, field), props);
}
function ToggleButtonGroup(props) {
    return React.createElement(MuiToggleButtonGroup, __assign({}, fieldToToggleButtonGroup(props)));
}
ToggleButtonGroup.displayName = 'FormikMaterialUIToggleButtonGroup';

exports.fieldToAutocomplete = fieldToAutocomplete;
exports.Autocomplete = Autocomplete;
exports.fieldToToggleButtonGroup = fieldToToggleButtonGroup;
exports.ToggleButtonGroup = ToggleButtonGroup;
//# sourceMappingURL=index.js.map
